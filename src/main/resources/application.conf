akka {
  loglevel = DEBUG

  actor {
    debug {
      receive = off # log any received message
      unhandled = on # log unhandled messages sent to actors
    }
  }

  http {
    client {
      parsing {
        max-content-length: 999999999
      }
    }
  }

  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }
}

inmemory-read-journal {
  # Absolute path to the write journal plugin configuration section to get the event adapters from
  write-plugin = "inmemory-journal"

  # there are two modes; sequence or uuid. If set to "sequence" and NoOffset will be requested, then
  # the query will return Sequence offset types. If set to "uuid" and NoOffset will be requested, then
  # the query will return TimeBasedUUID offset types. When the query is called with Sequence then
  # the query will return Sequence offset types and if the query is called with TimeBasedUUID types then
  # the query will return TimeBasedUUID offset types.
  offset-mode = "sequence"

  # ask timeout on Futures
  ask-timeout = "10s"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "100ms"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "100"
}

akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.PostgreSQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.PostgreSQLSnapshotStore"

  user = "postgres"
  password = "password"
  url = "jdbc:postgresql://localhost/persistence"
  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "metadata"
  journal-table-name = "journal"
  snapshot-table-name = "snapshots"
}